# Postgres Namespace
apiVersion: v1
kind: Namespace
metadata:
  name: app
  labels:
    name: app
---
# Postgres StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: app
spec:
  serviceName: postgres
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - name: postgres
          image: postgres:15
          ports:
            - containerPort: 5432
          env:
            - name: POSTGRES_DB
              valueFrom:
                configMapKeyRef:
                  name: database
                  key: in_cluster_postgres_database
            - name: POSTGRES_USER
              valueFrom:
                configMapKeyRef:
                  name: database
                  key: in_cluster_postgres_username
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: database
                  key: in_cluster_postgres_password
          volumeMounts:
            - name: postgres-storage
              mountPath: /var/lib/postgresql/data
              subPath: pgdata  # This creates /var/lib/postgresql/data/pgdata
  volumeClaimTemplates:
    - metadata:
        name: postgres-storage
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 10Gi
---
# Postgres Service
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: app
spec:
  selector:
    app: postgres
  ports:
    - port: 5432
      targetPort: 5432
  type: ClusterIP
---
# Redis StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis
  namespace: app
spec:
  serviceName: redis
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
        - name: redis
          image: redis:7-alpine
          ports:
            - containerPort: 6379
          volumeMounts:
            - name: redis-storage
              mountPath: /data
  volumeClaimTemplates:
    - metadata:
        name: redis-storage
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 5Gi
---
# Redis Service
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: app
spec:
  selector:
    app: redis
  ports:
    - port: 6379
      targetPort: 6379
  type: ClusterIP
---
# MySQL StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mysql
  namespace: app
spec:
  serviceName: mysql
  replicas: 1
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
        - name: mysql
          image: mysql:5.7
          ports:
            - containerPort: 3306
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: database
                  key: in_cluster_mysql_password
            - name: MYSQL_DATABASE
              valueFrom:
                configMapKeyRef:
                  name: database
                  key: in_cluster_mysql_database
            - name: MYSQL_USER
              valueFrom:
                configMapKeyRef:
                  name: database
                  key: in_cluster_mysql_username
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: database
                  key: in_cluster_mysql_password
          volumeMounts:
            - name: mysql-storage
              mountPath: /var/lib/mysql
              subPath: mysql-data  # This creates /var/lib/mysql/mysql-data

  volumeClaimTemplates:
    - metadata:
        name: mysql-storage
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 10Gi
---
# MySQL Service
apiVersion: v1
kind: Service
metadata:
  name: mysql
  namespace: app
spec:
  selector:
    app: mysql
  ports:
    - port: 3306
      targetPort: 3306
  type: ClusterIP
---
# DynamoDB StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: dynamodb
  namespace: app
spec:
  serviceName: dynamodb
  replicas: 1
  selector:
    matchLabels:
      app: dynamodb
  template:
    metadata:
      labels:
        app: dynamodb
    spec:
      containers:
        - name: dynamodb
          image: amazon/dynamodb-local:latest
          args:
            - "-jar"
            - "DynamoDBLocal.jar"
            - "-sharedDb"
            - "-dbPath"
            - "/data"
          ports:
            - containerPort: 8000
          volumeMounts:
            - name: dynamodb-storage
              mountPath: /data
  volumeClaimTemplates:
    - metadata:
        name: dynamodb-storage
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 5Gi
---
# DynamoDB Service
apiVersion: v1
kind: Service
metadata:
  name: dynamodb
  namespace: app
spec:
  selector:
    app: dynamodb
  ports:
    - port: 8000
      targetPort: 8000
  type: ClusterIP
---
# RabbitMQ StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: rabbitmq
  namespace: app
spec:
  serviceName: rabbitmq
  replicas: 1
  selector:
    matchLabels:
      app: rabbitmq
  template:
    metadata:
      labels:
        app: rabbitmq
    spec:
      containers:
        - name: rabbitmq
          image: rabbitmq:3.12-management-alpine
          ports:
            - containerPort: 5672
              name: amqp
            - containerPort: 15672
              name: management
          env:
            - name: RABBITMQ_DEFAULT_USER
              valueFrom:
                configMapKeyRef:
                  name: database
                  key: in_cluster_rabbitmq_username
            - name: RABBITMQ_DEFAULT_PASS
              valueFrom:
                secretKeyRef:
                  name: database
                  key: in_cluster_rabbitmq_password
          volumeMounts:
            - name: rabbitmq-storage
              mountPath: /var/lib/rabbitmq
  volumeClaimTemplates:
    - metadata:
        name: rabbitmq-storage
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 5Gi
---
# RabbitMQ Service
apiVersion: v1
kind: Service
metadata:
  name: rabbitmq
  namespace: app
spec:
  selector:
    app: rabbitmq
  ports:
    - port: 5672
      targetPort: 5672
      name: amqp
    - port: 15672
      targetPort: 15672
      name: management
  type: ClusterIP