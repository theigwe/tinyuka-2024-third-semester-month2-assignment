name: Terraform Infrastructure

on:
  push:
    paths:
      - 'terraform/infra/**'
      - '.github/workflows/terraform-infra.yml'
  pull_request:
    paths:
      - 'terraform/infra/**'
      - '.github/workflows/terraform-infra.yml'

env:
  TF_VERSION: 1.6.0
  WORKING_DIRECTORY: terraform/infra
  TF_VAR_aws_region: ${{ secrets.AWS_REGION }}
  TF_VAR_backend_bucket: ${{ secrets.TF_STATE_BUCKET }}
  TF_VAR_backend_bucket_key: ${{ secrets.TF_STATE_KEY }}
  TF_VAR_cluster_name: ${{ secrets.TF_CLUSTER_NAME }}
  TF_VAR_app_namespace: ${{ secrets.KUBE_APP_NAMESPACE }}

jobs:
  validate:
    name: Validate Terraform
    runs-on: ubuntu-latest
    environment: dev
    if: github.event_name == 'pull_request' || ((github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev') && github.event_name == 'push')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Terraform Init
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
            -backend-config="key=${{ secrets.TF_STATE_KEY }}" \
            -backend-config="region=${{ secrets.AWS_REGION }}"

      - name: Terraform Format Check
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: terraform fmt -check

      - name: Terraform Validate
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: terraform validate

  plan:
    needs: validate
    name: Terraform Plan
    runs-on: ubuntu-latest
    environment: dev
    if: github.ref == 'refs/heads/dev' && (github.event.pull_request.merged == true || github.event_name == 'push')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Terraform Init
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
            -backend-config="key=${{ secrets.TF_STATE_KEY }}" \
            -backend-config="region=${{ secrets.AWS_REGION }}"

      - name: Terraform Plan
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: terraform plan -no-color

  apply:
    needs: validate
    name: Terraform Apply
    runs-on: ubuntu-latest
    environment: dev
    if: github.ref == 'refs/heads/main' && (github.event.pull_request.merged == true || github.event_name == 'push')
    outputs:
      applied: ${{ steps.exec-apply.outputs.applied }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Terraform Init
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
            -backend-config="key=${{ secrets.TF_STATE_KEY }}" \
            -backend-config="region=${{ secrets.AWS_REGION }}"

      - name: Terraform Plan
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: terraform plan -no-color

      - name: Terraform Apply
        id: exec-apply
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          terraform apply -auto-approve
          echo "applied=true" >> $GITHUB_OUTPUT
  in-cluster-database-states:
    needs: apply
    environment: dev
    name: Create In-Cluster Database States
    runs-on: ubuntu-latest
    if: needs.apply.outputs.applied == 'true'
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'
      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ secrets.TF_CLUSTER_NAME }}
      - name: Verify cluster connection
        run: |
          kubectl cluster-info
          kubectl get nodes
      - name: Deploy Kubernetes manifests
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          kubectl apply -f database/ --namespace=${{ secrets.KUBE_APP_NAMESPACE }}
      - name: Wait for deployments to be ready
        run: |
          echo "Waiting for StatefulSets to be ready..."
          kubectl wait --for=condition=ready pod -l app=postgres --timeout=300s --namespace=${{ secrets.KUBE_APP_NAMESPACE }} || true
          kubectl wait --for=condition=ready pod -l app=redis --timeout=300s --namespace=${{ secrets.KUBE_APP_NAMESPACE }} || true
          kubectl wait --for=condition=ready pod -l app=mysql --timeout=300s --namespace=${{ secrets.KUBE_APP_NAMESPACE }} || true
          kubectl wait --for=condition=ready pod -l app=dynamodb --timeout=300s --namespace=${{ secrets.KUBE_APP_NAMESPACE }} || true
          kubectl wait --for=condition=ready pod -l app=rabbitmq --timeout=300s --namespace=${{ secrets.KUBE_APP_NAMESPACE }} || true
          
          
